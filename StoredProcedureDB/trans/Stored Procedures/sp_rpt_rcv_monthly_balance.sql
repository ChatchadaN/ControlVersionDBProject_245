CREATE PROCEDURE [trans].[sp_rpt_rcv_monthly_balance]
@YEAR_MONTH VARCHAR(8),
@LOCATION_ID INT,
@USER_ID INT
AS
BEGIN
	SET NOCOUNT ON
	DECLARE @FROM_DATE AS DATE;
	DECLARE @TO_DATE AS DATE;
	DECLARE @END_DATE AS DATE;
	DECLARE @END_MONTH AS DATE;
	DECLARE @_PRODUCT_ID INT;
	DECLARE @_PRODUCT_NAME NVARCHAR(50);
	DECLARE @_QUANTITY DECIMAL(18, 6);

	DECLARE @LAST_MONTH AS DATE
	DECLARE @LAST_MONTH_INT AS INT

	SET @LAST_MONTH  = (SELECT DATEADD(m, -1, CAST((SELECT CAST(@YEAR_MONTH AS VARCHAR(6)) + '01') AS date)))
	SET @LAST_MONTH_INT = (SELECT CAST(
		CAST(DATEPART(yyyy, @LAST_MONTH) AS VARCHAR(4)) + 
		REPLACE(STR(DATEPART(MM, @LAST_MONTH), 2), SPACE(1), '0')
		AS INT))

	SET @FROM_DATE = (SELECT CAST(@YEAR_MONTH + '01' AS DATE));
	SET @END_DATE = GETDATE();
	SET @END_MONTH = (SELECT DATEADD(d, -1, DATEADD(m, 1, @FROM_DATE)));

	IF @END_DATE > @END_MONTH
	BEGIN
		SET @END_DATE = @END_MONTH;
	END

	DELETE FROM [APCSProDB].[TRANS].[RPT_RCV_DAILY_BALANCE]-- WHERE [YEAR_MONTH] = @YEAR_MONTH;

	DECLARE DB_CURSOR CURSOR LOCAL FAST_FORWARD FOR
		SELECT DISTINCT [PROD].[ID], [PROD].[NAME], ISNULL(MONTH_END_QTY, 0)
			FROM [APCSProDB].[MATERIAL].[PRODUCTIONS] [PROD] WITH (NOLOCK)
				LEFT JOIN [APCSProDB].[TRANS].[MATERIAL_LEDGER_HIST] [HIST] WITH (NOLOCK)
					ON [STOREDPROCEDUREDB].MATERIAL.FN_STRIPCHARACTERS([PROD].[NAME], '^a-z0-9') = [STOREDPROCEDUREDB].MATERIAL.FN_STRIPCHARACTERS([HIST].[PRODUCT_NAME], '^a-z0-9')
			WHERE [HIST].[YEAR_MONTH] = @LAST_MONTH_INT AND [HIST].LOCATION_ID IN (SELECT [LOC].ID FROM [APCSProDB].[MATERIAL].LOCATIONS [LOC] WHERE WH_CODE = 'QI900')

	OPEN DB_CURSOR
	FETCH NEXT FROM DB_CURSOR INTO @_PRODUCT_ID, @_PRODUCT_NAME, @_QUANTITY
	WHILE @@FETCH_STATUS = 0
		BEGIN
			SET @FROM_DATE = (SELECT CAST(@YEAR_MONTH + '01' AS DATE));
			SET @TO_DATE = @FROM_DATE;
			INSERT INTO [APCSProDB].[TRANS].[RPT_RCV_DAILY_BALANCE]
				([YEAR_MONTH]
				,[DAY_ID]
				,[LOCATION_ID]
				,[MATERIAL_PRODUCTION_ID]
				,[PRODUCT_NAME]
				,[BEGIN_QUANTITY]
				,[IN_QUANTITY]
				,[OUT_QUANTITY]
				,[STOCK_QUANTITY])
				SELECT 
					@YEAR_MONTH,
					[DAYS].ID,
					@LOCATION_ID,
					@_PRODUCT_ID,
					@_PRODUCT_NAME,
					@_QUANTITY,
					0,
					0,
					@_QUANTITY
					FROM [APCSProDB].[TRANS].[DAYS] [DAYS] WITH (NOLOCK) WHERE [DATE_VALUE] BETWEEN @TO_DATE AND @END_DATE
					ORDER BY [DAYS].ID DESC
			FETCH NEXT FROM DB_CURSOR INTO @_PRODUCT_ID, @_PRODUCT_NAME, @_QUANTITY
		END
	CLOSE DB_CURSOR  
	DEALLOCATE DB_CURSOR;

	UPDATE [BAL] SET IN_QUANTITY = 
		ISNULL((
			SELECT 
				SUM([RECORDS].QUANTITY) 
				FROM [APCSProDB].[TRANS].MATERIAL_RECORDS [RECORDS] WITH (NOLOCK)
				WHERE [RECORDS].RECORD_CLASS = 0
					AND [RECORDS].RECORDED_AT >= @FROM_DATE
					AND [RECORDS].DAY_ID = [BAL].DAY_ID
					AND [RECORDS].MATERIAL_PRODUCTION_ID = [BAL].MATERIAL_PRODUCTION_ID
					AND [RECORDS].LOCATION_ID IN (SELECT [LOC].ID FROM [APCSProDB].[MATERIAL].LOCATIONS [LOC] WHERE WH_CODE = 'QI900')
				GROUP BY [RECORDS].MATERIAL_PRODUCTION_ID 
		), 0)
		FROM [APCSProDB].[TRANS].[RPT_RCV_DAILY_BALANCE] [BAL] WITH (NOLOCK)
		
	UPDATE [BAL] SET OUT_QUANTITY = 
		ISNULL((
			SELECT 
				SUM([RECORDS].QUANTITY) 
				FROM [APCSProDB].[TRANS].MATERIAL_RECORDS [RECORDS] WITH (NOLOCK)
				WHERE [RECORDS].RECORD_CLASS = 2
					AND [RECORDS].RECORDED_AT >= @FROM_DATE
					AND [RECORDS].DAY_ID = [BAL].DAY_ID
					AND [RECORDS].MATERIAL_PRODUCTION_ID = [BAL].MATERIAL_PRODUCTION_ID
					AND [RECORDS].LOCATION_ID IN (SELECT [LOC].ID FROM [APCSProDB].[MATERIAL].LOCATIONS [LOC] WHERE WH_CODE = 'QI900')
				GROUP BY [RECORDS].MATERIAL_PRODUCTION_ID 
		), 0)
		FROM [APCSProDB].[TRANS].[RPT_RCV_DAILY_BALANCE] [BAL];

	-- CALCULATE ONLY IN ITS ROW
	UPDATE [BAL]
		SET [BAL].STOCK_QUANTITY = 
			ISNULL((SELECT TOP 1 [PREV].[STOCK_QUANTITY] 
				FROM [APCSProDB].[TRANS].[RPT_RCV_DAILY_BALANCE] [PREV]  WITH (NOLOCK)
				WHERE [PREV].DAY_ID = [BAL].DAY_ID-1 AND [PREV].MATERIAL_PRODUCTION_ID = [BAL].MATERIAL_PRODUCTION_ID
			), [BAL].[BEGIN_QUANTITY]) + [BAL].[IN_QUANTITY] - [BAL].[OUT_QUANTITY]
		FROM [APCSPRODB].[TRANS].[RPT_RCV_DAILY_BALANCE] [BAL]


	DECLARE @_DAY_ID INT;
	DECLARE @_MATERIAL_PRODUCTION_ID INT;
	DECLARE @_IN_QUANTITY DECIMAL(18, 6);
	DECLARE @_OUT_QUANTITY DECIMAL(18, 6);
	DECLARE @_STOCK_QUANTITY DECIMAL(18, 6);

	DECLARE DB_CURSOR CURSOR LOCAL FAST_FORWARD FOR
		SELECT
			[DAY_ID]
			,[MATERIAL_PRODUCTION_ID]
			,[IN_QUANTITY]
			,[OUT_QUANTITY]
			,[STOCK_QUANTITY]
			FROM [APCSProDB].[TRANS].[RPT_RCV_DAILY_BALANCE] [BAL] WITH (NOLOCK)
				INNER JOIN [APCSProDB].[TRANS].[DAYS] [DAYS] WITH (NOLOCK) ON [BAL].DAY_ID = [DAYS].ID
				WHERE IN_QUANTITY > 0 OR OUT_QUANTITY > 0
				ORDER BY [YEAR_MONTH], [MATERIAL_PRODUCTION_ID], [DATE_VALUE];
	OPEN DB_CURSOR
		FETCH NEXT FROM DB_CURSOR INTO @_DAY_ID, @_MATERIAL_PRODUCTION_ID, @_IN_QUANTITY, @_OUT_QUANTITY, @_STOCK_QUANTITY
		WHILE @@FETCH_STATUS = 0
		BEGIN
			IF @_OUT_QUANTITY > 0
			BEGIN
				UPDATE [APCSProDB].[TRANS].[RPT_RCV_DAILY_BALANCE] 
						SET STOCK_QUANTITY = STOCK_QUANTITY - @_OUT_QUANTITY 
					WHERE MATERIAL_PRODUCTION_ID = @_MATERIAL_PRODUCTION_ID AND DAY_ID > @_DAY_ID
			END
			
			IF @_IN_QUANTITY > 0
			BEGIN
				UPDATE [APCSProDB].[TRANS].[RPT_RCV_DAILY_BALANCE] 
						SET STOCK_QUANTITY = STOCK_QUANTITY + @_IN_QUANTITY 
					WHERE MATERIAL_PRODUCTION_ID = @_MATERIAL_PRODUCTION_ID AND DAY_ID > @_DAY_ID
			END

			FETCH NEXT FROM DB_CURSOR INTO @_DAY_ID, @_MATERIAL_PRODUCTION_ID, @_IN_QUANTITY, @_OUT_QUANTITY, @_STOCK_QUANTITY
		END
	CLOSE DB_CURSOR  
	DEALLOCATE DB_CURSOR;
	
	UPDATE [BAL] SET [BAL].BEGIN_QUANTITY = 
		ISNULL((SELECT TOP 1 STOCK_QUANTITY FROM [APCSPRODB].[TRANS].[RPT_RCV_DAILY_BALANCE] [REF] WITH (NOLOCK) WHERE [REF].DAY_ID = [BAL].DAY_ID - 1 AND [BAL].MATERIAL_PRODUCTION_ID = [REF].MATERIAL_PRODUCTION_ID), BEGIN_QUANTITY)
				FROM [APCSProDB].[TRANS].[RPT_RCV_DAILY_BALANCE] [BAL]

	SELECT
		[YEAR_MONTH]
		,[DAY_ID]
		,[DATE_VALUE]
		,[LOCATION_ID]
		,[MATERIAL_PRODUCTION_ID]
		,[PRODUCT_NAME]
		,[BEGIN_QUANTITY]
		,[IN_QUANTITY]
		,[OUT_QUANTITY]
		,[STOCK_QUANTITY]
		FROM [APCSProDB].[TRANS].[RPT_RCV_DAILY_BALANCE] [BAL] WITH (NOLOCK)
			INNER JOIN [APCSProDB].[TRANS].[DAYS] [DAYS] ON [BAL].DAY_ID = [DAYS].ID
			ORDER BY [YEAR_MONTH], [PRODUCT_NAME], MATERIAL_PRODUCTION_ID, [DATE_VALUE];
	SET NOCOUNT OFF
END;

--EXEC [trans].[sp_rpt_rcv_monthly_balance] '202001', 2, 1